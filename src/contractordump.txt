   <p>Contractor: {constructionData.contractor}</p>
      <p>Amount: {constructionData.amount}</p>


      import React, { createContext, useContext, useState } from "react";

const DataContext = createContext();

export const DataProvider = ({ children }) => {
  const [constructionData, setConstructionData] = useState({
    contractor: "",
    amount: 0,
  });

  const [projectData, setProjectData] = useState({
    plotNo: "",
    projectName: "",
    blockName: "",
  });

  return (
    <DataContext.Provider
      value={{
        constructionData,
        setConstructionData,
        projectData,
        setProjectData,
      }}
    >
      {children}
    </DataContext.Provider>
  );
};

export const useData = () => useContext(DataContext);
  {/* <FormControl>
            <Flex align="center" justifyContent={"space-between"}>
              <FormLabel fontSize={"18px"} fontWeight={"semibold"}>
                Date :-
              </FormLabel>
              <Input
                type="date"
                w={"60%"}
                position={"relative"}
                right={"40px"}
                value={transactionDate}
                onChange={(e) => setTransactionDate(e.target.value)}
              />
            </Flex>
          </FormControl> */}


            <Button onClick={addTransaction}>Save</Button>




            const handleEditDataChange = (e) => {
    const { name, value } = e.target;
    setEditData((prevData) => ({
      ...prevData,
      [name]: value,
    }));
  };

  const handleSaveEdit = () => {
    const editedAmount = parseFloat(editData.amount);
    const updatedTotalPaid = Number(totalPaid) + editedAmount;
    const updatedTotalBalance = Number(totalBalance) - editedAmount;

    console.log("Updated Total Paid:", updatedTotalPaid);
    console.log("Updated Total Balance:", updatedTotalBalance);

    console.log("Edited Amount:", editData.amount);
    console.log("Edited Date:", editData.date);
    console.log("Edited Remarks:", editData.remarks);
    console.log("Edited Cheque Number:", editData.cheqNo);

    setShowEditModal(false);
    setTotalPaid(updatedTotalPaid); // Update total paid state
    setTotalBalance(updatedTotalBalance); // Update total balance state
    const updatedFetchData = fetchData.map((item) =>
      item.id === editData.id ? { ...item, ...editData } : item
    );
    setFetchData(updatedFetchData);
  };

  const handleCancelEdit = () => {
    setShowEditModal(false);
  };


  <Modal isOpen={showEditModal} onClose={handleCancelEdit}>
        <ModalOverlay />
        <ModalContent>
          <ModalHeader>Edit Transaction</ModalHeader>
          <ModalCloseButton />
          <ModalBody>
            <FormControl>
              <FormLabel>Amount</FormLabel>
              <Input
                type="number"
                name="amount"
                value={editData.amount}
                onChange={handleEditDataChange}
              />
            </FormControl>
            <FormControl>
              <FormLabel>Cheque Number</FormLabel>
              <Input
                type="text"
                name="cheqNo"
                value={editData.cheqNo}
                onChange={handleEditDataChange}
              />
            </FormControl>
            <FormControl>
              <FormLabel>Remarks</FormLabel>
              <Input
                type="text"
                name="remarks"
                value={editData.remarks}
                onChange={handleEditDataChange}
              />
            </FormControl>
            <FormControl>
              <FormLabel>Date</FormLabel>
              <Input
                type="date"
                name="date"
                value={editData.date}
                onChange={handleEditDataChange}
              />
            </FormControl>
          </ModalBody>
          <ModalFooter>
            <Button colorScheme="blue" mr={3} onClick={handleSaveEdit}>
              Save
            </Button>
            <Button onClick={handleCancelEdit}>Cancel</Button>
          </ModalFooter>
        </ModalContent>
      </Modal>


        const [showEditModal, setShowEditModal] = useState(false);
  const [editData, setEditData] = useState({
    amount: "",
    cheqNo: "",
    remarks: "",
    date: "",
  });


    const handleEditModalOpen = (id) => {
    const editRow = fetchData.find((item) => item.id === id);
    setEditData(editRow);
    setShowEditModal(true);
  };